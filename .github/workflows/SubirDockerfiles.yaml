name: Reusable Subir Imagen

on:
  workflow_call:
    inputs:
      MICROSERVICE:
        required: true
        type: string
      DB_HOST: 
        required: true
        type: string
      DB_PORT: 
        required: true
        type: string
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:  
        required: true
      DB_NAME:
        required: true
      DB_USER:
        required: true
      DB_PASSWORD:
        required: true

jobs:
  testFrontend:
    if: ${{ inputs.MICROSERVICE == 'frontend' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Test frontend
        run: |
          echo "Configurando y ejecutando linter"
          npm install eslint --save-dev
          npx eslint --init
          npx eslint . --ext .js,.jsx,.ts,.tsx

  testBackend:
    if: ${{ inputs.MICROSERVICE == 'backend' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    env:
      SPRING_DB_HOST: ${{ inputs.DB_HOST }}
      SPRING_DB_PORT: ${{ inputs.DB_PORT }}
      SPRING_DB_NAME: ${{ secrets.DB_NAME }}
      SPRING_DB_USER: ${{ secrets.DB_USER }}
      SPRING_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    steps:
      - name: Checkout 
        uses: actions/checkout@v3

  subirImagen:
    needs: [testFrontend, testBackend]
    if: always()
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Mostrar archivos
        run: ls


      - name: Instalar CLI de Azure
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Iniciar sesi√≥n en Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}"
            }

      - name: Login en Azure Container Registry
        run: |
          az acr login --name containerregistryvsanchez

      - name: Construir imagen
        run: |
          docker build -t imagen-proyecto-${{ inputs.MICROSERVICE }} .

      - name: Etiquetar la imagen
        run: |
          docker tag imagen-proyecto-${{ inputs.MICROSERVICE }} containerregistryvsanchez.azurecr.io/imagen-proyecto-${{ inputs.MICROSERVICE }}:${{ github.sha }}

      - name: Pushear imagen
        run: |
          docker push containerregistryvsanchez.azurecr.io/imagen-proyecto-${{ inputs.MICROSERVICE }}:${{ github.sha }}
