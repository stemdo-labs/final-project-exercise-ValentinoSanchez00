- name: Backup
  hosts: bd
  become: true
  vars:
    postgres_user: "postgres"
    postgres_db: "orquestas"
    backup_file: "/var/backups/postgres/backup_{{ ansible_date_time.date }}.sql.gz.enc"
    encryption_key: "G7x!#aB12$vf@kT"
    local_backup_dir: "/backups"
    ansible_user: "vsanchez"
    azure_container_name: "bdbackups"
    azure_account_name: "stavsanchezdvfinlab"
    azure_container_url: "https://stavsanchezdvfinlab.blob.core.windows.net/bdbackups"
  environment:
    ARM_CLIENT_ID: "{{ lookup('env', 'ARM_CLIENT_ID') }}"
    ARM_CLIENT_SECRET: "{{ lookup('env', 'ARM_CLIENT_SECRET') }}"
    ARM_SUBSCRIPTION_ID: "{{ lookup('env', 'ARM_SUBSCRIPTION_ID') }}"
    ARM_TENANT_ID: "{{ lookup('env', 'ARM_TENANT_ID') }}"

  tasks:

    - name: Actualizar la caché de paquetes
      apt:
        update_cache: yes
      become: true

    - name: Instalar azcopy si no está disponible
      shell: |
        if ! command -v azcopy &> /dev/null; then
          wget -O /tmp/azcopy.tar.gz https://aka.ms/downloadazcopy-linux && \
          tar -xf /tmp/azcopy.tar.gz --strip-components=1 -C /usr/local/bin/ && \
          chmod +x /usr/local/bin/azcopy;
        fi
      args:
        warn: false
      become: true

    - name: Crear el directorio de backups si no existe
      file:
        path: "/var/backups/postgres"
        state: directory
        mode: '0755'

    - name: Dump y cifrar la base de datos PostgreSQL
      shell: |
        pg_dump -U {{ postgres_user }} {{ postgres_db }} | gzip | openssl enc -aes-256-cbc -salt -out {{ backup_file }} -k "{{ encryption_key }}"
      environment:
        PGPASSWORD: "mypassword"
      register: backup_result

    - name: Verificar si el dump y cifrado fue exitoso
      debug:
        msg: "Backup creado correctamente en {{ backup_file }}"
      when: backup_result.rc == 0

    - name: Crear el directorio local de backups si no existe
      local_action:
        module: file
        path: "{{ local_backup_dir }}"
        state: directory
        mode: '0777'

    - name: Ajustar permisos del archivo de backup
      file:
        path: "{{ backup_file }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0777'
      become: true

    - name: Traer el backup al controlador local
      fetch:
        src: "{{ backup_file }}"
        dest: "{{ local_backup_dir }}/"
        flat: yes
      become: true

    - name: Confirmar la transferencia del archivo al controlador local
      debug:
        msg: "Backup transferido correctamente al controlador local en {{ local_backup_dir }}/{{ backup_file | basename }}"

    - name: Subir el archivo de backup al contenedor de Azure usando azcopy
      shell: |
        azcopy copy "{{ local_backup_dir }}/{{ backup_file | basename }}" \
        "{{ azure_container_url }}/backup-{{ ansible_date_time.date }}.sql.gz.enc" \
        --recursive
      environment:
        AZCOPY_SPA_CLIENT_ID: "{{ lookup('env', 'ARM_CLIENT_ID') }}"
        AZCOPY_SPA_CLIENT_SECRET: "{{ lookup('env', 'ARM_CLIENT_SECRET') }}"
        AZCOPY_TENANT_ID: "{{ lookup('env', 'ARM_TENANT_ID') }}"
        AZCOPY_SPA_AUTH_MODE: "login"
      register: azcopy_output
      failed_when: "'Failed' in azcopy_output.stdout or azcopy_output.rc != 0"

    - name: Confirmar la subida a Azure con azcopy
      debug:
        msg: "Backup subido correctamente al contenedor de Azure usando azcopy."
