- name: Backup
  hosts: bd
  become: true
  vars:
    postgres_user: "postgres"
    postgres_db: "orquestas"
    backup_file: "/var/backups/postgres/backup_{{ ansible_date_time.date }}.sql.gz.enc"
    encryption_key: "G7x!#aB12$vf@kT"
    local_backup_dir: "/backups"
    ansible_user: "adminuser"
    azure_container_name: "bdbackups"
    azure_account_name: "stavsanchezdvfinlab"
  environment:
    ARM_CLIENT_ID: "{{ lookup('env', 'ARM_CLIENT_ID') }}"
    ARM_CLIENT_SECRET: "{{ lookup('env', 'ARM_CLIENT_SECRET') }}"
    ARM_SUBSCRIPTION_ID: "{{ lookup('env', 'ARM_SUBSCRIPTION_ID') }}"
    ARM_TENANT_ID: "{{ lookup('env', 'ARM_TENANT_ID') }}"
    POSTGRE_USER: "{{ lookup('env', 'POSTGRE_USER') }}"
    POSTGRE_PASSWORD: "{{ lookup('env', 'POSTGRE_PASSWORD') }}"
    DB_NAME: "{{ lookup('env', 'DB_NAME') }}"

  tasks:
    - name: Actualizar la caché de paquetes
      apt:
        update_cache: yes
      become: true
      
    - name: Obtener una lista de bases de datos existentes
      shell: |
        PGPASSWORD="{{ lookup('env', 'POSTGRE_PASSWORD') }}" \
        psql -h localhost -U "{{ lookup('env', 'POSTGRE_USER') }}" -d postgres \
        -t -c "SELECT datname FROM pg_database WHERE datistemplate = false;"
      register: db_info
      failed_when: db_info.rc != 0

    - name: Mostrar bases de datos obtenidas
      debug:
        msg: "{{ db_info.stdout_lines }}"

    - name: Descargar backup desde Azure si la base de datos no existe
      shell: |
        az storage blob download \
          --container-name "{{ azure_container_name }}" \
          --account-name "{{ azure_account_name }}" \
          --file "{{ local_backup_dir }}/backup_{{ ansible_date_time.date }}.sql.gz.enc" \
          --name "backup-{{ ansible_date_time.date }}.sql.gz.enc"
      environment:
        AZURE_CLIENT_ID: "{{ lookup('env', 'ARM_CLIENT_ID') }}"
        AZURE_CLIENT_SECRET: "{{ lookup('env', 'ARM_CLIENT_SECRET') }}"
        AZURE_SUBSCRIPTION_ID: "{{ lookup('env', 'ARM_SUBSCRIPTION_ID') }}"
        AZURE_TENANT_ID: "{{ lookup('env', 'ARM_TENANT_ID') }}"
      register: download_output
      failed_when: "'ERROR' in download_output.stdout"
      when: lookup('env', 'DB_NAME') not in db_info.stdout_lines

    - name: Restaurar la base de datos desde el backup descargado
      shell: |
        gzip -d < {{ local_backup_dir }}/backup_{{ ansible_date_time.date }}.sql.gz.enc | \
        openssl enc -d -aes-256-cbc -salt -k "{{ encryption_key }}" | \
        PGPASSWORD="{{ lookup('env', 'POSTGRE_PASSWORD') }}" psql -U {{ postgres_user }} -d {{ postgres_db }}
      when: download_output.rc == 0

    - name: Crear el directorio de backups si no existe
      file:
        path: "/var/backups/postgres"
        state: directory
        mode: '0755'

    - name: Crear nuevo backup y cifrarlo si no hubo restauración
      shell: |
        pg_dump -U {{ postgres_user }} {{ postgres_db }} | gzip | openssl enc -aes-256-cbc -salt -out {{ backup_file }} -k "{{ encryption_key }}"
      environment:
        PGPASSWORD: "{{ lookup('env', 'POSTGRE_PASSWORD') }}"
      register: backup_result
      when: download_output is not defined or download_output.rc != 0

    - name: Verificar si el dump y cifrado fue exitoso
      debug:
        msg: "Backup creado correctamente en {{ backup_file }}"
      when: backup_result is defined and backup_result.rc == 0

    - name: Subir el nuevo backup a Azure si se creó
      shell: |
        az storage blob upload \
          --container-name "{{ azure_container_name }}" \
          --account-name "{{ azure_account_name }}" \
          --file "{{ backup_file }}" \
          --name "backup-{{ ansible_date_time.date }}.sql.gz.enc"
      environment:
        AZURE_CLIENT_ID: "{{ lookup('env', 'ARM_CLIENT_ID') }}"
        AZURE_CLIENT_SECRET: "{{ lookup('env', 'ARM_CLIENT_SECRET') }}"
        AZURE_SUBSCRIPTION_ID: "{{ lookup('env', 'ARM_SUBSCRIPTION_ID') }}"
        AZURE_TENANT_ID: "{{ lookup('env', 'ARM_TENANT_ID') }}"
      when: backup_result is defined and backup_result.rc == 0

    - name: Confirmar que el proceso se completó correctamente
      debug:
        msg: >-
          {% if download_output is defined and download_output.rc == 0 %}
            Restauración completada desde el backup descargado.
          {% elif backup_result is defined and backup_result.rc == 0 %}
            Nuevo backup creado y subido a Azure correctamente.
          {% else %}
            No se realizaron cambios en la base de datos.
          {% endif %}
